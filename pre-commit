#!/bin/bash

# set permission
if [ -f "$0" ]; then
    chmod +x "$0"
else
    echo -e "‚ùå File $(basename "$0") not found."
    exit 1
fi

# Hooks pre-commit
TARGET_FILE=".git/hooks/pre-commit"
if [ -f "$TARGET_FILE" ]; then
    chmod +x "$TARGET_FILE"
else
    echo -e "‚ùå File $TARGET_FILE not found."
    exit 1
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Icons for steps
ICON_PINT="‚öôÔ∏è"
ICON_PHPSTAN="üõ†Ô∏è"
ICON_ESLINT="üîç"
ICON_PRETTIER="üé®"
ICON_BUILD="‚ö°"

# Exit when any command fails
set -e

# Store the staged files
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=d | grep ".php$" | tr '\n' ' ')
STAGED_JS_FILES=$(git diff --cached --name-only --diff-filter=d | grep ".js$" | tr '\n' ' ')

# Function to display error
display_error() {
    echo -e "${RED}‚ùå $1${NC}"
    errors=true
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to display step headers
display_step() {
    local step_icon=$1
    local step_description=$2
    echo -e "${BLUE}\n-----------------------------------\n${BOLD}Step $3:${CYAN} ${step_icon} $step_description\n-----------------------------------\n${NC}"
}
# Run PHP-CS-FIXER
display_step "$ICON_PHPSTAN" "Running PHP-CS-FIXER" 1
phpcsfixer_result=$(cd Backend && ./vendor/bin/php-cs-fixer fix app --diff)
echo "$phpcsfixer_result"

# Run Laravel Pint
display_step "$ICON_PINT" "Running Laravel Pint" 2
pint_result=$(cd Backend && ./vendor/bin/pint --dirty ) || display_error "Laravel Pint found issues"
echo "$pint_result"

# Run PHPStan/Larastan
display_step "$ICON_PHPSTAN" "Running PHPStan" 3
phpstan_result=$(cd Backend && ./vendor/bin/phpstan analyse --memory-limit=1G)
echo "$phpstan_result"

# Run ESLint for JavaScript
display_step "$ICON_ESLINT" "Running ESLint" 4
eslint_result=$(cd Frontend && npm run lint)
echo "$eslint_result"

# Run Prettier for JavaScript
display_step "$ICON_PRETTIER" "Running Prettier" 5
prettier_result=$(cd Frontend && npm run prettier:fix)
echo "$prettier_result"

# Run build before commit
display_step "$ICON_BUILD" "Running Build" 6
build_result=$(cd Frontend && npm run build)
echo "$build_result"

# Results summary
echo -e "\n\n${CYAN}${BOLD}_____Summary_____${NC}\n"
summary_table="\n${GREEN}| Task              | Status   | Outcome         | Suggest                                     |\n|-------------------|----------|-----------------|---------------------------------------------|${NC}"

# Summary checks
pass=true

if echo "$phpcsfixer_result" | grep -Fq "Found"; then
    summary_table+="\n| PHP-CS-FIXER      | ${RED}FAIL${NC}     | Rejected        | Fix-cs-fixer errors. |
"
    pass=false
else
    summary_table+="\n| PHP-CS-FIXER      | ${GREEN}PASS${NC}     | Allowed         | No action needed. All PHP code passes the static analysis. |
"
fi

if echo "$pint_result" | grep -q "FAIL"; then
    summary_table+="\n| Laravel Pint      | ${RED}FAIL${NC}     | Rejected        | Run Pint to fix coding style issues in the backend code. |
"
    pass=false
else
    summary_table+="\n| Laravel Pint      | ${GREEN}PASS${NC}     | Allowed         | No action needed. Everything is properly formatted. |
"
fi

if echo "$phpstan_result" | grep -Fq "[OK] No errors"; then
    summary_table+="\n| PHPStan           | ${GREEN}PASS${NC}     | Allowed         | No action needed. All PHP code passes the static analysis. |
"
else
    summary_table+="\n| PHPStan           | ${RED}FAIL${NC}     | Rejected        | Fix PHPStan errors related to type-checking and potential issues. |
"
    pass=false
fi

if echo "$eslint_result" | grep -q "‚úñ"; then
    summary_table+="\n| ESLint            | ${RED}FAIL${NC}     | Rejected        | Fix ESLint issues in JavaScript code according to the linting rules. |
"
    pass=false
else
    summary_table+="\n| ESLint            | ${GREEN}PASS${NC}     | Allowed         | No action needed. JavaScript code is lint-free. |
"
fi

if echo "$prettier_result" | grep -q "s$"; then
    summary_table+="\n| Prettier          | ${RED}FAIL${NC}     | Rejected        | Run Prettier to fix code formatting issues. |
"
    pass=false
else
    summary_table+="\n| Prettier          | ${GREEN}PASS${NC}     | Allowed         | No action needed. All files are properly formatted. |
"
fi

if echo "$build_result" | grep -q "ERROR"; then
    summary_table+="\n| Build             | ${RED}FAIL${NC}     | Rejected        | Fix build issues to ensure the project is stable and can be compiled successfully. |
"
    pass=false
else
    summary_table+="\n| Build             | ${GREEN}PASS${NC}     | Allowed         | No action needed. Everything looks good. |
"
fi

summary_table+="\n|-------------------|----------|-----------------|---------------------------------------------|\n"
echo -e "$summary_table"

# Exit if any test failed
if ! $pass; then
    echo -e "\n${RED}‚ùå Fix all errors before commit!${NC}\n"
    exit 1
fi

# Add modified files back to staging
if [ -n "$STAGED_PHP_FILES" ]; then
    echo -e "\n${GREEN}‚úîÔ∏è All files are valid format. Committing...${NC}\n"
    git add $STAGED_PHP_FILES
    echo -e "${GREEN}‚úÖ Can push code!${NC}\n"    
fi

exit 0
